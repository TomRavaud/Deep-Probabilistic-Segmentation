_target_: models.object_segmentation_module.ObjectSegmentationLitModule

optimizer:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 0.001
  weight_decay: 0.00001

scheduler:
  main_scheduler:
    _target_: torch.optim.lr_scheduler.SequentialLR
    _partial_: true 
    milestones: [1]
  
  sub_schedulers:
    - _target_: torch.optim.lr_scheduler.LinearLR
      _partial_: true
      start_factor: 0.0001
      end_factor: 1.0
    - _target_: torch.optim.lr_scheduler.MultiStepLR
      _partial_: true
      milestones: [100, 180, 240, 280]
      gamma: 0.5

model:
  _target_: models.components.object_segmentation_model.ObjectSegmentationModel

  probabilistic_segmentation_model:
    _target_: toolbox.modules.probabilistic_segmentation_mlp.ProbabilisticSegmentationMLP
    net_cls:
      _target_: toolbox.modules.simple_resnet_module.SimpleResNet
      _partial_: true
      version: 34
      nb_input_channels: 4
      output_logits: true

    patch_size: 5
    mlp_hidden_dims: [64, 32, 16]
    apply_color_transformations: true
    compile: false
    output_logits: true


  # If set to true, the model will not render the object set nor use the MobileSAM model
  use_gt_masks: true

  # Object set
  object_set_cfg:
    # Directory and name of the object set (3D models to render)
    dir: ${paths.data_dir}/google_scanned_objects
    name: gso.normalized_decimated
  
  image_size: ${data.transformations_cfg.resize}

  # Pretrained weights for the MobileSAM model
  sam_checkpoint: weights/mobile_sam.ckpt

  # Compile parts of the model for faster training with PyTorch 2.0
  compile: false


criterion:
  _target_: models.components.segmentation_losses.FocalDiceCombinationLoss

  # Focal loss parameters
  gamma: 2.0  # Focusing parameter
  alpha: 0.25  # Balancing parameter (percentage of negative samples)

  # Dice loss parameters
  smooth: 1.0  # Smoothing factor

  with_logits: true  # If 'true', sigmoid activation is applied

  # Weights for the Focal and Dice losses
  k_focal: 20.0
  k_dice: 1.0
